<?php

namespace App\Http\Controllers\Api\Client;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Validator;
use App\Models\Address;


/**
 * @group Client Addresses
 *
 * API endpoints for managing clients addresses
 */

class AddressController extends Controller
{
    /**
     * Add new address Endpoint
     *
     * This endpoint allows you to add commonly used addresses for user.
     * To add new addresses you need access_token generated by this authentication endpoints.
     *
     * @bodyParam   first_name string required First name of the person. Example: John
     * @bodyParam   last_name string required Last name of the person. Example: Panda
     * @bodyParam   company_name string required Company name for address. Example: Google LLC
     * @bodyParam   street_address string required Valid address with street location. Example: Jinnah Avenue near Zero Point
     * @bodyParam   street_address2 string optional Valid address with street location (Line 2). Example: Front of Jinnah Park
     * @bodyParam   coordinates string required Coordinates (Lat, long) of the selected address (Json array). Example: {"lat": "57886", "lng": "23112"}
     * @bodyParam   city string required City of the mentioned address. Example: Islamabad
     * @bodyParam   zip_code integer required Zip code of the mentioned town or city. Example: 64200
     *
     * @response {
     *      "status": true,
     *      "message": "Address is created successfully!",
     *  }
     *
     * @response 401 {
     *       "message": "Unauthenticated."
     *   }
     */
    function store_address(Request $request){

        $messages = array(
            'first_name.required' => __('First Name field is required.'),
            'company_name.string' => __('Company Name must be string.'),
            'last_name.required' => __('Last Name field is required.'),
            'company_name.required' => __('Company Name field is required.'),
            'street_address.required' => __('Street address is required.'),
            'zip_code.required' => __('Zip code felid is required.'),
            'zip_code.integer' => __('Zip code must be integer.'),
            'coordinates.required' => __('Coordinated field is required.'),
            'city.required' => __('City field is required.')
        );
        $validator = Validator::make($request->all(), [
            'first_name' => 'required',
            'last_name' => 'required',
            'company_name' => 'required',
            'street_address'=> 'required',
            'coordinates' => 'required',
            'zip_code'=> 'required|integer',
            'city'=> 'required',
        ], $messages);

        if ($validator->fails()) {
            return response()->json(['status' => false, 'errors' => $validator->errors()]);
        }

        $address = Address::create([
            'customer_id' => $request->user()->id,
            'first_name' => $request->first_name,
            'last_name' => $request->last_name,
            'company_name' => $request->company_name,
            'coordinates' => json_encode($request->coordinates),
            'street_address' => $request->street_address,
            'street_address2' => $request->street_address2,
            'zip_code' => $request->zip_code,
            'city' => $request->city,
        ]);
        if($address){
            return response()->json(['status' => true, 'message' => 'Address is created successfully!']);
        }else{
            return response()->json(['status' => false, 'message' => 'Server Error!'], 500);
        }

    }

    /**
     * Get Customer address Endpoint
     *
     * This endpoint allows you to fetch all addresses created by Client.
     * To add new addresses you need access_token generated by this authentication endpoints.
     *
     * @response {
     *      "status": true,
     *      "message": "Address is created successfully!",
     *  }
     *
     * @response 401 {
     *       "message": "Unauthenticated."
     *   }
     */

    function get_addresses(Request $request){

        $user_id = $request->user()->id;
        $addresses = Address::where('customer_id', $user_id)->orderBy('id', 'desc')->get();
        if($addresses){
            return response()->json(['status' => true, 'data' => $addresses]);
        }else{
            return response()->json(['status' => false, 'message' => 'Addresses not found against this customer!']);
        }


    }
}
