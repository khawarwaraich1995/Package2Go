<?php

namespace App\Http\Controllers\Api\Client;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Models\Customer;
use App\Mail\ForgotPasswordMail;
use App\Mail\WelcomeuserMail;
use App\Models\CustomerToken;
use Illuminate\Support\Facades\Hash;
use Auth;
use Socialite;
use App\Models\Notification;
use Illuminate\Support\Str;
use Carbon\Carbon;
use Mail;
use DB;
use Validator;

/**
 * @group Client Authentication
 *
 * API endpoints for managing clients authentication
 */

class AuthController extends Controller
{

    /**
     * Register Endpoint
     *
     * This endpoint allows you to register client and generate token for authentication.
     * Along token client details will be displayed. To call authorized endpoints you need access_token generated by this endpoint.
     *
     * @bodyParam   name string required The name of the client. Example: John Panda
     * @bodyParam   email email required The valid email of the client. Example: john@example.com
     * @bodyParam   password string required The password of the client. Example: secret
     *
     * @response {
     *      "status": true,
     *      "data": {
     *          "name": "Panda",
     *          "email": "panda@gmail.com",
     *          "id": 2
     *      },
     *      "access_token": "14|wiazS1DtHNXIWDToygChQD84uqU9HwVaU10nWVia",
     *      "token_type": "Bearer"
     *  }
     *
     */
    function register(Request $request)
    {
        $messages = array(
            'name.required' => __('Name field is required.'),
            'name.string' => __('Name must be string.'),
            'email.required' => __('Email field is required.'),
            'email.string' => __('Email must be string.'),
            'email.email' => __('Email address must be valid.'),
            'email.unique' => __('Email address is already taken.'),
            'password.required' => __('Password field is required.'),
            'password.string' => __('Password must be string.'),
            'password.min' => __('Password must be at-least 8 characters.')
        );
        $validator = Validator::make($request->all(), [
            'name' => 'required|string|max:255',
            'email' => 'required|string|email|unique:customers',
            'password' => 'required|string|min:8'
        ], $messages);

        if ($validator->fails()) {
            return response()->json(['status' => false, 'errors' => $validator->errors()]);
        }

        $user = Customer::create([
            'name' => $request->name,
            'email' => $request->email,
            'address' => $request->address,
            'password' => Hash::make($request->password)
        ]);

        $token = $user->createToken('auth_token')->plainTextToken;
        unset($user->created_at);
        unset($user->updated_at);
        //Mail::to($request->email)->send(new WelcomeuserMail($user));
        return response()
            ->json(['status' => true, 'data' => $user, 'access_token' => $token, 'token_type' => 'Bearer'], 201);
    }

    /**
     * Login Endpoint
     *
     * This endpoint allows you to generate token of client after authentication.
     * Along token client details will be displayed. To call authorized endpoints you need access_token generated by this endpoint.
     *
     * @bodyParam   email email required The valid email of the client. Example: testuser@example.com
     * @bodyParam   password string required The password of the client. Example: secret
     *
     * @response {
     *      "status": true,
     *      "message": "You have successfully logged in!",
     *      "access_token": "13|JQHbQK8QuNHCzwztR30u2ogiBxuZNSBwJhZX8sop",
     *      "token_type": "Bearer",
     *      "data": {
     *          "id": 1,
     *          "name": "John Panda",
     *          "email": "panda@gmail.com",
     *          "status": 1
     *      }
     *  }
     *
     * @response 401 {
     *       "status": false,
     *       "message": "These credentials do not match our records!"
     *   }
     */

    function login(Request $request)
    {
        $messages = array(
            'email.required' => __('Email field is required.'),
            'email.email' => __('Email address must be valid.'),
            'password.required' => __('Password field is required.')
        );
        $validator = Validator::make($request->all(), [
            'email' => 'required|email',
            'password' => 'required'
        ], $messages);

        if ($validator->fails()) {
            return response()->json(['status' => false, 'errors' => $validator->errors()]);
        }

        $user = Customer::select(['id', 'name', 'email', 'password', 'status'])
            ->where('email', $request->email)
            ->first();
        if (!$user || !Hash::check($request->password, $user->password)) {
            return response([
                'status' => false,
                'message' => 'These credentials do not match our records!'
            ], 401);
        }
        $token = $user->createToken('auth_token')->plainTextToken;

        return response()
            ->json(['status' => true, 'message' => 'You have successfully logged in!', 'access_token' => $token, 'token_type' => 'Bearer', 'data' => $user], 200);
    }


    /**
     * Social Login Endpoint
     *
     * This endpoint allows you to authorize by social account like facebook and google.
     *
     * @bodyParam   driver string required Social driver is required. Example: facebook
     * @bodyParam   token string required Access token generated by social login SDK.
     *
     * @response {
     *       "status": true,
     *       "message": "You have successfully logged in!",
     *       "access_token": "26|Jweprv2xDC8Qfah9ystGJA8NHn8VrLfTr2PttPg2",
     *       "token_type": "Bearer",
     *       "data": {
     *           "id": 6,
     *           "name": "Sharon Alggeabdhccfj Occhinosen",
     *           "email": "RIYJNbKp",
     *           "email_verified_at": null,
     *           "phone": null,
     *           "country": null,
     *           "city": null,
     *           "address": null,
     *           "gender": null,
     *           "image": null,
     *           "status": 1,
     *           "created_at": "2022-01-25T18:03:50.000000Z",
     *           "updated_at": "2022-01-25T18:03:50.000000Z",
     *           "fb_id": "105785355348547",
     *           "google_id": null
     *       }
     *   }
     */

    function social_login(Request $request)
    {

        $messages = array(
            'driver.required' => __('Social driver is required.'),
            'driver.in' => __('Driver must be one of them:L facebook, google.'),
            'token.required' => __('Access token is required.')
        );
        $validator = Validator::make($request->all(), [
            'driver' => 'required|in:facebook,google',
            'token' => 'required'
        ], $messages);

        if ($validator->fails()) {
            return response()->json(['status' => false, 'errors' => $validator->errors()]);
        }

        try {

            $user = Socialite::driver($request->driver)->stateless()->userFromToken($request->token);
            $isUser = Customer::where('fb_id', $user->id)->first();

            if($request->driver == 'facebook'){
                $id =  'fb_id';
            }else{
                $id =  'google_id';
            }

            if($isUser){
                $token = $isUser->createToken('auth_token')->plainTextToken;
                return response()
                ->json(['status' => true, 'message' => 'You have successfully logged in!', 'access_token' => $token, 'token_type' => 'Bearer', 'data' => $isUser], 200);
            }else{
                $createUser = Customer::create([
                    'name' => $user->name ?? Str::random(8),
                    'email' => $user->email ?? Str::random(8),
                    $id => $user->id,
                    'password' => Str::random(8)
                ]);

                $token = $createUser->createToken('auth_token')->plainTextToken;
                return response()
                ->json(['status' => true, 'message' => 'You have successfully logged in!', 'access_token' => $token, 'token_type' => 'Bearer', 'data' => $createUser], 200);
            }

        } catch (Exception $exception) {
            dd($exception->getMessage());
        }
    }


    /**
     * Profile update Endpoint
     *
     * This endpoint allows you to update profile of user.
     * To update profile data you need access_token generated by this authentication endpoints.
     *
     * @bodyParam   name string optional Full name of the client. Example: John Panda
     * @bodyParam   phone string optional Valid phone number the client (International format). Example: +91234567890
     * @bodyParam   address string optional Valid full address of the client. Example: Street 1, Main Block, XYZ
     * @bodyParam   image image optional Image should be less than 2MB and contains mentioned extensions (jpeg,png,jpg)
     *
     * @response {
     *      "status": true,
     *      "message": "Your profile has been updated!",
     *  }
     *
     * @response 401 {
     *       "message": "Unauthenticated."
     *   }
     */


    function profileUpdate(Request $request){


        $messages = array(
            'image.image' => __('Image field must be image file type.'),
            'image.mimes' => __('Supported extensions for image are jpeg,png,jpg only.'),
            'image.max' => __('Image size should be less than 2MB.')
        );
        $validator = Validator::make($request->all(), [
            'image' => 'nullable|image|mimes:jpeg,png,jpg|max:2048',
        ], $messages);

        if ($validator->fails()) {
            return response()->json(['status' => false, 'errors' => $validator->errors()]);
        }

        //User from token
        $token = $request->user();

        $user = Customer::find($token->id);
        $user->name = $request->name;
        $user->phone = $request->phone;
        $user->address = $request->address;
        if($request->hasFile('image')){

            $imageName = time().'.'.$request->image->extension();
            $request->image->move(public_path('uploads/images/user/'), $imageName);
            $user->image = $imageName;
        }
        $user->save();

        return response()->json(['status' => true, 'message' => 'Your profile has been updated!', 'user'=>$user]);

    }


    /**
     * Logout Endpoint
     *
     * This endpoint allows you to remove client token generated for authentication to logout user.
     * To logout token must be required in header otherwise client will be Unauthenticated.
     *
     * @header Authorization Bearer $token
     *
     * @response {
     *      "status": true,
     *        "message": "You have successfully logged out!"
     *  }

     * @response 401 {
     *        "message": "Unauthenticated."
     *  }
     */

    function logout(Request $request)
    {
        $request->user()->tokens()->delete();

        return [
            'status' => true,
            'message' => 'You have successfully logged out!'
        ];
    }

    /**
     * Forgot Password Endpoint
     *
     * This endpoint allows you to send request for forgot password.
     * To make request user must be registered with system and have a valid email. After request
     * user will receive email with password reset link.
     *
     * @bodyParam   email email required The valid email of the client. Example: testuser@example.com
     *
     * @response {
     *      "status": true,
     *        "message": "We have e-mailed your password reset link!"
     *  }

     * @response 422 {
     *       "status": false,
     *       "errors": {
      *      "email": [
      *          "User with this email does not exists."
      *      ]
      *  }
     *  }
     */

    function forgotPassword(Request $request)
    {

        $messages = array(
            'email.required' => __('Email field is required.'),
            'email.email' => __('Email address must be valid.'),
            'email.exists' => __('User with this email does not exists.')
        );
        $validator = Validator::make($request->all(), [
            'email' => 'required|email|exists:customers,email'
        ], $messages);

        if ($validator->fails()) {
            return response()->json(['status' => false, 'errors' => $validator->errors()], 422);
        }

        $token = Str::random(64);

        DB::table('password_resets')->insert([
            'email' => $request->email,
            'token' => $token,
            'created_at' => Carbon::now()
        ]);

        $user = Customer::where('email', $request->email)->first();
        try{

            $mailData = array([
                'token' => $token,
                'user' => $user
            ]);

            Mail::to($request->email)->send(new ForgotPasswordMail($mailData));

            if (Mail::failures()) {
                return response()->json(['status' => false, 'message' => 'Error in sending email!']);
            }else{
                    return response()->json(['status' => true, 'message' => 'We have e-mailed your password reset link!']);
            }



        }catch(Exception $exception){

            return response()->json(['status' => false, 'message' => $exception->getMessage()]);

        }


    }

    /**
     * Device Token Store Endpoint
     *
     * This endpoint allows you to store device token to send notifications to the customers.
     *
     * @bodyParam   token string required The token generated from OneSignal SDK of the client.
     *
     * @response {
     *      "status": true,
     *        "message": "Device token has been stored!"
     *  }

     * @response 401 {
     *       "message": "Unauthenticated",
     *  }
     *  }
     */

    function store_token(Request $request){

        $messages = array(
            'token.required' => __('Token field is required.')
        );
        $validator = Validator::make($request->all(), [
            'token' => 'required'
        ], $messages);

        if ($validator->fails()) {
            return response()->json(['status' => false, 'errors' => $validator->errors()], 422);
        }

        $customer = $request->user();

        $token = array();
        $token['customer_id'] = $customer->id;
        $token['token'] = $request->token;
        CustomerToken::create($token);

        return response()->json(['status' => true, 'message' => "Device token has been stored!"]);

    }

    /**
     * Customer Notifications
     *
     * This endpoint allows you to get notification of the authenticated customer.
     * To get notifications you need token from Auth end points.
     *
     *
     * @response {
     *       "status": true,
     *       "message": "Notifications found!",
     *       "data": {
     *           "message": "Your shipment with Tracking# SH-PPVE1BQ has been cancelled. For reason check Shipment detaIls!",
     *           "notified_at": "36 minutes ago"
     *       }
     *   }
     *
     * @response 401 {
     *       "message": "Unauthenticated",
     *  }
     *  }
     */
    function get_notifications(Request $request){

        $customer_id = $request->user()->id;
        $notifications = Notification::where('customer_id', $customer_id)->get();
        if(!$notifications){
            return response()->json(['status' => false, 'message' => "No notifications found!"]);
        }
        foreach($notifications as $key => $notification){
            $notification->notified_at =  $notification->created_at->diffForHumans();
        }
        return response()->json(['status' => true, 'message' => "Notifications found!", 'data' => $notifications]);
    }


    function showResetPasswordForm($token){

        $resetToken = DB::table('password_resets')
                        ->select('email')
                        ->where('token', $token)
                        ->first();

        return view('admin.auth.passwords.reset', ['token' => $token, 'email' => $resetToken->email]);
    }


    function submitResetPasswordForm(Request $request){

        $request->validate([
            'email' => 'required|email|exists:customers',
            'password' => 'required|string|min:6|confirmed',
            'password_confirmation' => 'required'
        ]);

        $updatePassword = DB::table('password_resets')
                            ->where([
                              'email' => $request->email,
                              'token' => $request->token
                            ])
                            ->first();

        if(!$updatePassword){
            return back()->withInput()->with('error', 'Token invalid or expired!');
        }

        $user = Customer::where('email', $request->email)
                    ->update(['password' => Hash::make($request->password)]);

        DB::table('password_resets')->where(['email'=> $request->email])->delete();

        return back()->with('message', 'Your password has been changed!');

    }
}
