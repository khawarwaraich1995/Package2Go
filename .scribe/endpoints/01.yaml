name: 'Client Authentication'
description: |-

  API endpoints for managing clients authentication
endpoints:
  -
    httpMethods:
      - POST
    uri: api/v1/client/register
    metadata:
      title: 'Register Endpoint'
      description: |-
        This endpoint allows you to register client and generate token for authentication.
        Along token client details will be displayed. To call authorized endpoints you need access_token generated by this endpoint.
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'The name of the client.'
        required: true
        example: 'John Panda'
        type: string
      email:
        name: email
        description: 'The valid email of the client.'
        required: true
        example: john@example.com
        type: email
      password:
        name: password
        description: 'The password of the client.'
        required: true
        example: secret
        type: string
    responses:
      -
        status: 200
        content: |-
          {
               "status": true,
               "data": {
                   "name": "Panda",
                   "email": "panda@gmail.com",
                   "id": 2
               },
               "access_token": "14|wiazS1DtHNXIWDToygChQD84uqU9HwVaU10nWVia",
               "token_type": "Bearer"
           }
        headers: []
        description: '200'
    responseFields: []
  -
    httpMethods:
      - POST
    uri: api/v1/client/login
    metadata:
      title: 'Login Endpoint'
      description: |-
        This endpoint allows you to generate token of client after authentication.
        Along token client details will be displayed. To call authorized endpoints you need access_token generated by this endpoint.
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters:
      email:
        name: email
        description: 'The valid email of the client.'
        required: true
        example: testuser@example.com
        type: email
      password:
        name: password
        description: 'The password of the client.'
        required: true
        example: secret
        type: string
    responses:
      -
        status: 200
        content: |-
          {
               "status": true,
               "message": "You have successfully logged in!",
               "access_token": "13|JQHbQK8QuNHCzwztR30u2ogiBxuZNSBwJhZX8sop",
               "token_type": "Bearer",
               "data": {
                   "id": 1,
                   "name": "John Panda",
                   "email": "panda@gmail.com",
                   "status": 1
               }
           }
        headers: []
        description: '200'
      -
        status: 401
        content: |-
          {
                "status": false,
                "message": "These credentials do not match our records!"
            }
        headers: []
        description: '401'
    responseFields: []
  -
    httpMethods:
      - POST
    uri: api/v1/client/logout
    metadata:
      title: 'Logout Endpoint'
      description: |-
        This endpoint allows you to remove client token generated for authentication to logout user.
        To logout token must be required in header otherwise client will be Unauthenticated.
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: 'Bearer $token'
    urlParameters: []
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 200
        content: |-
          {
               "status": true,
                 "message": "You have successfully logged out!"
           }
        headers: []
        description: '200'
      -
        status: 401
        content: |-
          {
                 "message": "Unauthenticated."
           }
        headers: []
        description: '401'
    responseFields: []
  -
    httpMethods:
      - POST
    uri: api/v1/client/forgot-password
    metadata:
      title: 'Forgot Password Endpoint'
      description: |-
        This endpoint allows you to send request for forgot password.
        To make request user must be registered with system and have a valid email. After request
        user will receive email with password reset link.
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters:
      email:
        name: email
        description: 'The valid email of the client.'
        required: true
        example: testuser@example.com
        type: email
    responses:
      -
        status: 200
        content: |-
          {
               "status": true,
                 "message": "We have e-mailed your password reset link!"
           }
        headers: []
        description: '200'
      -
        status: 422
        content: |-
          {
                "status": false,
                "errors": {
               "email": [
                   "User with this email does not exists."
               ]
           }
           }
        headers: []
        description: '422'
    responseFields: []
  -
    httpMethods:
      - POST
    uri: api/v1/client/profile-update
    metadata:
      title: 'Profile update Endpoint'
      description: |-
        This endpoint allows you to update profile of user.
        To update profile data you need access_token generated by this authentication endpoints.
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters:
      image:
        name: image
        description: 'optional Image should be less than 2MB and contains mentioned extensions (jpeg,png,jpg)'
        required: false
        example: ipsam
        type: image
      name:
        name: name
        description: 'optional Full name of the client.'
        required: false
        example: 'John Panda'
        type: string
      phone:
        name: phone
        description: 'optional Valid phone number the client (International format).'
        required: false
        example: '+91234567890'
        type: string
      address:
        name: address
        description: 'optional Valid full address of the client.'
        required: false
        example: 'Street 1, Main Block, XYZ'
        type: string
    responses:
      -
        status: 200
        content: |-
          {
               "status": true,
               "message": "Your profile has been updated!",
           }
        headers: []
        description: '200'
      -
        status: 401
        content: |-
          {
                "message": "Unauthenticated."
            }
        headers: []
        description: '401'
    responseFields: []
  -
    httpMethods:
      - POST
    uri: api/v1/client/store-device-token
    metadata:
      title: 'Device Token Store Endpoint'
      description: 'This endpoint allows you to store device token to send notifications to the customers.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters:
      token:
        name: token
        description: 'The token generated from OneSignal SDK of the client.'
        required: true
        example: quod
        type: string
    responses:
      -
        status: 200
        content: |-
          {
               "status": true,
                 "message": "Device token has been stored!"
           }
        headers: []
        description: '200'
      -
        status: 401
        content: |-
          {
                "message": "Unauthenticated",
           }
           }
        headers: []
        description: '401'
    responseFields: []
  -
    httpMethods:
      - POST
    uri: api/v1/client/social-login
    metadata:
      title: 'Social Login Endpoint'
      description: 'This endpoint allows you to authorize by social account like facebook and google.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters:
      driver:
        name: driver
        description: 'Social driver is required.'
        required: true
        example: facebook
        type: string
      token:
        name: token
        description: 'Access token generated by social login SDK.'
        required: true
        example: in
        type: string
    responses:
      -
        status: 200
        content: |-
          {
                "status": true,
                "message": "You have successfully logged in!",
                "access_token": "26|Jweprv2xDC8Qfah9ystGJA8NHn8VrLfTr2PttPg2",
                "token_type": "Bearer",
                "data": {
                    "id": 6,
                    "name": "Sharon Alggeabdhccfj Occhinosen",
                    "email": "RIYJNbKp",
                    "email_verified_at": null,
                    "phone": null,
                    "country": null,
                    "city": null,
                    "address": null,
                    "gender": null,
                    "image": null,
                    "status": 1,
                    "created_at": "2022-01-25T18:03:50.000000Z",
                    "updated_at": "2022-01-25T18:03:50.000000Z",
                    "fb_id": "105785355348547",
                    "google_id": null
                }
            }
        headers: []
        description: '200'
    responseFields: []
  -
    httpMethods:
      - GET
    uri: api/v1/client/get-notifications
    metadata:
      title: 'Customer Notifications'
      description: |-
        This endpoint allows you to get notification of the authenticated customer.
        To get notifications you need token from Auth end points.
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 200
        content: |-
          {
                "status": true,
                "message": "Notifications found!",
                "data": {
                    "message": "Your shipment with Tracking# SH-PPVE1BQ has been cancelled. For reason check Shipment detaIls!",
                    "notified_at": "36 minutes ago"
                }
            }
        headers: []
        description: '200'
      -
        status: 401
        content: |-
          {
                "message": "Unauthenticated",
           }
           }
        headers: []
        description: '401'
    responseFields: []
